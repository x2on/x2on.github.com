<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Featured | x2on.de]]></title>
  <link href="http://x2on.github.com/categories/featured/atom.xml" rel="self"/>
  <link href="http://x2on.github.com/"/>
  <updated>2014-05-06T07:58:56+02:00</updated>
  <id>http://x2on.github.com/</id>
  <author>
    <name><![CDATA[Felix Schulze]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tutorial: iPhone App with compiled OpenSSL Library]]></title>
    <link href="http://x2on.github.com/2010/02/01/tutorial-iphone-app-with-compiled-openssl-library/"/>
    <updated>2010-02-01T18:42:23+01:00</updated>
    <id>http://x2on.github.com/2010/02/01/tutorial-iphone-app-with-compiled-openssl-library</id>
    <content type="html"><![CDATA[<p>This is a tutorial for using self-compiled builds of  the OpenSSL-library on the iPhone. You can build apps with XCode and the official SDK from Apple with this. I also made a small example-app for using the libraries with XCode and the iPhone/iPhone-Simulator. You can also download the precompiled OpenSSL-library (1.0.0a).</p>

<p>This tutorial works with OpenSSL 0.9.8o and Xcode 3.2 with iPhoneOS 3.1.3.
An updated version of this tutorial for OpenSSL 1.0 and Xcode 3.2.3 with iOS 4 is here:
<a href="http://www.x2on.de/2010/07/13/tutorial-iphone-app-with-compiled-openssl-1-0-0a-library/">http://www.x2on.de/2010/07/13/tutorial-iphone-app-with-compiled-openssl-1-0-0a-library/</a></p>

<p>UPDATE 2010-07-13: New tutorial for OpenSSL 1.0.0a and iOS4
UPDATE 2010-06-30: I have updated OpenSSL to 1.0.0a with iOS 4.0 as base SDK
UPDATE 2010-06-10: I have updated OpenSSL to 0.9.8o + iPad Version
UPDATE 2010-03-31: I have updated OpenSSL to 0.9.8n
UPDATE 2010-02-26: I have updated OpenSSL to 0.9.8m</p>

<p>You can get the Source of the example app with compiled OpenSSL at <a href="http://github.com/x2on/OpenSSL-for-iPhone">http://github.com/x2on/OpenSSL-for-iPhone</a></p>

<p><strong>Create OpenSSL Libary:</strong></p>

<ul>
<li>Download OpenSSL Sourcecode</li>
<li>Build OpenSSL for i368 iPhoneSimulator:</li>
</ul>


<p><code>bash
cd openssl-0.9.8o
mkdir openssl_arm
mkdir openssl_i386
./config --openssldir=/Users//openssl-0.9.8o/openssl_i386
</code></p>

<ul>
<li>Edit Makefile:</li>
<li>Change <code>CC = cc</code> to:</li>
</ul>


<p><code>make
CC= /Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/gcc-4.0
</code></p>

<ul>
<li>Add as first item to CFLAG:</li>
</ul>


<p><code>make   
-isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator3.1.2.sdk
</code></p>

<pre><code>* Change in crypto/ui/ui_openssl.c


static volatile sig_atomic_t intr_signal;
</code></pre>

<p>to</p>

<pre><code>static volatile int intr_signal;
</code></pre>

<p>for preventing building error</p>

<pre><code>* Build it:


make
make install





* Your libcrypto.a and libssl.a are in the folder openssl_i368/lib


* Rename the two files to libcrypto_i386.a and libssl_i386.a
</code></pre>

<ul>
<li><p>Build OpenSSL for arm iPhoneOS:</p>

<ul>
<li></li>
</ul>


<p>mv openssl_i386 openssl_i386_lib
make clean</p>

<ul>
<li><p>Edit Makefile:</p>

<ul>
<li><p>Search and replace openssl_i386 with openssl_arm</p></li>
<li><p>Change -arch i386 in CFLAG to:
-arch armv6</p>

<ul>
<li>Change</li>
</ul>
</li>
</ul>


<p>CC=  /Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/gcc-4.0</p></li>
</ul>
</li>
</ul>


<p>to</p>

<pre><code>CC=  /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc-4.0





  * Change


-isysroot  /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator3.1.2.sdk
</code></pre>

<p>to</p>

<pre><code>-isysroot  /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS3.1.2.sdk








* Build it:


make
make install





* Your libcrypto.a and libssl.a are in the folder openssl_arm/lib


* Rename the two files to libcrypto_arm.a and libssl_arm.a
</code></pre>

<p><strong>Edit your iPhone-XCode project:</strong></p>

<ul>
<li><p>Copy the "include" folder from OpenSSL into your project-folder</p></li>
<li><p>Copy the libcrypto<em>*.a and libss</em>*.a files into your project-folder</p></li>
<li><p>Drag the libcrypto<em>*.a and libss</em>*.a files into your XCode Framework Folder-Tree</p></li>
<li><p>Open the Build-Info from your "Target" (Righclick on Target - Get Info)</p></li>
<li><p>Change <em>Library Search Paths</em> to</p>

<p>$(inherited) "$(SRCROOT)"</p></li>
<li><p>Change <em>User Header Search Paths</em> to <em>include</em></p></li>
<li><p>Activate <em>Always Search User Paths</em></p></li>
</ul>


<p><strong>Enjoy OpenSSL on the iPhone!</strong></p>

<p>I have made an iPhone OS 3.1.2 XCode Project with OpenSSL 0.9.8o libaries. The examples uses the MD5-algorithm to calculate an md5 hash from an UITextfield.</p>

<p><strong>Download:</strong> <a href="http://github.com/x2on/OpenSSL-for-iPhone">http://github.com/x2on/OpenSSL-for-iPhone</a></p>

<p><strong>Disclaimer: Use this at your own risk.</strong></p>

<p><strong>Links: </strong></p>

<ul>
<li><p><a href="http://www.therareair.com/2009/01/01/tutorial-how-to-compile-openssl-for-the-iphone/">http://www.therareair.com/2009/01/01/tutorial-how-to-compile-openssl-for-the-iphone/</a></p></li>
<li><p><a href="http://www.openssl.org/">http://www.openssl.org/</a></p></li>
<li><p><a href="http://cocoawithlove.com/2009/06/base64-encoding-options-on-mac-and.html">http://cocoawithlove.com/2009/06/base64-encoding-options-on-mac-and.html</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1&1 Surf-Stick (ZTE MF110) unter Ubuntu 9.10]]></title>
    <link href="http://x2on.github.com/2010/01/14/11-surf-stick-zte-mf110-unter-ubuntu-9-10/"/>
    <updated>2010-01-14T22:19:13+01:00</updated>
    <id>http://x2on.github.com/2010/01/14/11-surf-stick-zte-mf110-unter-ubuntu-9-10</id>
    <content type="html"><![CDATA[<p>Um den 1&amp;1 Surf-Stick (ZTE MF110) auch unter Ubuntu 9.10 benutzen zu können, muss der USB-Modus des Sticks umgeschaltet werden. Dieser läuft standardmäßig als Filesystem und nicht als UMTS-Stick.
Ein Tool namens "USB_Modeswitch" schafft hierbei Abhilfe.</p>

<p><strong>UPDATE 01.02.2010 - 13:20:</strong> Durch eine neue Version von usb_modeswitch haben sich die Befehle leicht verändert. Die Anleitung habe ich angepasst. (Sollte vorher bereits eine ältere Version installiert worden sein, so muss diese mit "sudo make uninstall" entfernt werden)</p>

<p><strong>UPDATE 26.04.2011 - 21:32:</strong> Update to modeswitch 1.1.7.</p>

<p><strong>Anleitung:</strong></p>

<p><code>bash
sudo apt-get install gcc make libusb-dev
wget http://www.draisberghof.de/usb_modeswitch/usb-modeswitch-1.1.7.tar.bz2
tar xvfj usb-modeswitch-1.1.7.tar.bz2
cd usb-modeswitch-1.1.7
sudo make install
</code></p>

<p>Danach erkennt Ubuntu den Stick als UMTS-Hardware und das Profil kann angelegt werden. (Bei 1&amp;1 ist der APN mail.partner.de)</p>

<p>Links: <a href="http://www.draisberghof.de/usb_modeswitch/">http://www.draisberghof.de/usb_modeswitch/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaTex: Fußzeile auf jeder Seite]]></title>
    <link href="http://x2on.github.com/2009/02/25/latex-fusszeile-auf-jeder-seite/"/>
    <updated>2009-02-25T20:00:48+01:00</updated>
    <id>http://x2on.github.com/2009/02/25/latex-fusszeile-auf-jeder-seite</id>
    <content type="html"><![CDATA[<p>Mit LaTex gibt es mit dem Paket <code>fancyhdr</code> eine einfache Möglichkeit Fußzeilen zu erzeugen. Diese werden jedoch auf den Kapitel-Seiten (die über <code>chapter{Kapitelname}</code> erzeugt werden) nicht angezeigt, da LaTex hier automatisch <code>thispagestyle{plain}</code> aufruft. Damit aber auch auf diesen Seiten eine Fusszeile angezeigt wird, muss man den Plain-Styl überschreiben:</p>

<p><div><script src='https://gist.github.com/4659299.js'></script>
<noscript><pre><code>%Kopf- und Fußzeile
usepackage{fancyhdr}
pagestyle{fancy}
fancyhf{}

%Kopfzeile mittig mit Kaptilname
fancyhead[C]{nouppercase{leftmark}}
%Linie oben
renewcommand{headrulewidth}{0.5pt}

%Fußzeile links bzw. innen
fancyfoot[L]{Text muss hier stehen}
%Fußzeile mittig (Seitennummer)
fancyfoot[C]{thepage}
%Linie unten
renewcommand{footrulewidth}{0.5pt}

% Fußzeile auf jeder Seite - auch Kapitel und Inhaltsverzeichnis
fancypagestyle{plain}{%
   fancyhf{}%
   fancyhead[C]{} %Kapitelname ausblenden
   fancyfoot[L]{Text muss hier stehen}
   renewcommand{headrulewidth}{0.0pt} %obere Linie ausblenden
   fancyfoot[C]{thepage}
}</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
