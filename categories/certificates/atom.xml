<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Certificates | x2on.de]]></title>
  <link href="http://x2on.github.com/categories/certificates/atom.xml" rel="self"/>
  <link href="http://x2on.github.com/"/>
  <updated>2013-06-26T21:50:36+02:00</updated>
  <id>http://x2on.github.com/</id>
  <author>
    <name><![CDATA[Felix Schulze]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Secure-Mail Beta Test - S/MIME on iOS with OpenSSL (UPDATE #3)]]></title>
    <link href="http://x2on.github.com/2011/04/01/secure-mail-beta-test-smime-on-ios-with-openssl/"/>
    <updated>2011-04-01T15:57:24+02:00</updated>
    <id>http://x2on.github.com/2011/04/01/secure-mail-beta-test-smime-on-ios-with-openssl</id>
    <content type="html"><![CDATA[<p>Im searching some people how want's to test Secure-Mail App.</p>

<p>With Secure-Mail you can read S/MIME encrypted mails directly from Mail.app and send encrypted S/MIME mails with SMTP.</p>

<!--more-->


<p>Please send me an email with some details about you, and why you wan't test the beta.</p>

<p><strong>2011-04-13: UPDATE #1:</strong> The Beta-Test is running now. At this time no new beta-testers are invited. Thanks for your help.</p>

<p><strong>2011-04-24: UPDATE #2:</strong> Waiting for review: <a href="http://www.x2on.de/2011/04/24/secure-mail-waiting-for-review/">http://www.x2on.de/2011/04/24/secure-mail-waiting-for-review/</a></p>

<p><strong>2011-04-28: UPDATE #3</strong> The App is now ready for download: <a href="http://www.x2on.de/2011/04/28/secure-mail-is-ready-for-download-on-apple-app-store/">http://www.x2on.de/2011/04/28/secure-mail-is-ready-for-download-on-apple-app-store/</a></p>

<p><strong>More details about Secure-Mail:</strong> <a href="http://www.x2on.de/2010/12/06/smime-on-ios-with-openssl-iphoneipad/">http://www.x2on.de/2010/12/06/smime-on-ios-with-openssl-iphoneipad/</a></p>

<p><a href="http://www.x2on.de/wp-content/uploads/2010/12/Screen2.png"><img src="http://www.x2on.de/wp-content/uploads/2010/12/Screen2-159x300.png" alt="" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Script for building OpenSSL for iOS (iPhone/iPad)]]></title>
    <link href="http://x2on.github.com/2010/12/16/tutorial-script-for-building-openssl-for-ios-iphoneipad/"/>
    <updated>2010-12-16T20:13:54+01:00</updated>
    <id>http://x2on.github.com/2010/12/16/tutorial-script-for-building-openssl-for-ios-iphoneipad</id>
    <content type="html"><![CDATA[<p>Related to my posts <a href="http://www.x2on.de/2010/02/01/tutorial-iphone-app-with-compiled-openssl-library/">http://www.x2on.de/2010/02/01/tutorial-iphone-app-with-compiled-openssl-library/</a> and <a href="http://www.x2on.de/2010/07/13/tutorial-iphone-app-with-compiled-openssl-1-0-0a-library/">http://www.x2on.de/2010/07/13/tutorial-iphone-app-with-compiled-openssl-1-0-0a-library/</a> i created a buildscript for building OpenSSL for iOS (iPhone/iPad).</p>

<!--more-->


<p>You can get it here: <a href="https://github.com/x2on/OpenSSL-for-iPhone/blob/master/build-libssl.sh">https://github.com/x2on/OpenSSL-for-iPhone/blob/master/build-libssl.sh</a></p>

<p><strong>Source:</strong>
<div><script src='https://gist.github.com/2962107.js'></script>
<noscript><pre><code>#!/bin/sh

#  Automatic build script for libssl and libcrypto 
#  for iPhoneOS and iPhoneSimulator
#
#  Created by Felix Schulze on 16.12.10.
#  Copyright 2010 Felix Schulze. All rights reserved.
#
#  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
###########################################################################
#  Change values here													  #
#																		  #
VERSION=&quot;1.0.0c&quot;													      #
SDKVERSION=&quot;4.2&quot;														  #
#																		  #
###########################################################################
#																		  #
# Don't change anything under this line!								  #
#																		  #
###########################################################################



CURRENTPATH=`pwd`

set -e
if [ ! -e openssl-${VERSION}.tar.gz ]; then
	echo &quot;Downloading openssl-${VERSION}.tar.gz&quot;
	curl -O http://www.openssl.org/source/openssl-${VERSION}.tar.gz
else
	echo &quot;Using openssl-${VERSION}.tar.gz&quot;
fi

mkdir -p &quot;${CURRENTPATH}/src&quot;
tar zxf openssl-${VERSION}.tar.gz -C &quot;${CURRENTPATH}/src&quot;
cd &quot;${CURRENTPATH}/src/openssl-${VERSION}&quot;

############
# iPhone Simulator
echo &quot;Building openssl for iPhoneSimulator ${SDKVERSION} i386&quot;
echo &quot;Please stand by...&quot;

export CC=&quot;/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/gcc -arch i386&quot;
mkdir -p &quot;${CURRENTPATH}/bin/iPhoneSimulator${SDKVERSION}.sdk&quot;

LOG=&quot;${CURRENTPATH}/bin/iPhoneSimulator${SDKVERSION}.sdk/build-openssl-${VERSION}.log&quot;

./configure BSD-generic32 --openssldir=&quot;${CURRENTPATH}/bin/iPhoneSimulator${SDKVERSION}.sdk&quot; &gt; &quot;${LOG}&quot; 2&gt;&amp;1
# add -isysroot to CC=
sed -ie &quot;s!^CFLAG=!CFLAG=-isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator${SDKVERSION}.sdk !&quot; &quot;Makefile&quot;

make &gt;&gt; &quot;${LOG}&quot; 2&gt;&amp;1
make install &gt;&gt; &quot;${LOG}&quot; 2&gt;&amp;1
make clean &gt;&gt; &quot;${LOG}&quot; 2&gt;&amp;1
#############

#############
# iPhoneOS armv6
echo &quot;Building openssl for iPhoneOS ${SDKVERSION} armv6&quot;
echo &quot;Please stand by...&quot;

export CC=&quot;/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc -arch armv6&quot;
mkdir -p &quot;${CURRENTPATH}/bin/iPhoneOS${SDKVERSION}-armv6.sdk&quot;

LOG=&quot;${CURRENTPATH}/bin/iPhoneOS${SDKVERSION}-armv6.sdk/build-openssl-${VERSION}.log&quot;

./configure BSD-generic32 --openssldir=&quot;${CURRENTPATH}/bin/iPhoneOS${SDKVERSION}-armv6.sdk&quot; &gt; &quot;${LOG}&quot; 2&gt;&amp;1

sed -ie &quot;s!^CFLAG=!CFLAG=-isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS${SDKVERSION}.sdk !&quot; &quot;Makefile&quot;
# remove sig_atomic for iPhoneOS
sed -ie &quot;s!static volatile sig_atomic_t intr_signal;!static volatile intr_signal;!&quot; &quot;crypto/ui/ui_openssl.c&quot;

make &gt;&gt; &quot;${LOG}&quot; 2&gt;&amp;1
make install &gt;&gt; &quot;${LOG}&quot; 2&gt;&amp;1
make clean &gt;&gt; &quot;${LOG}&quot; 2&gt;&amp;1
#############

#############
# iPhoneOS armv7
echo &quot;Building openssl for iPhoneOS ${SDKVERSION} armv7&quot;
echo &quot;Please stand by...&quot;

export CC=&quot;/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc -arch armv7&quot;
mkdir -p &quot;${CURRENTPATH}/bin/iPhoneOS${SDKVERSION}-armv7.sdk&quot;

LOG=&quot;${CURRENTPATH}/bin/iPhoneOS${SDKVERSION}-armv7.sdk/build-openssl-${VERSION}.log&quot;


./configure BSD-generic32 --openssldir=&quot;${CURRENTPATH}/bin/iPhoneOS${SDKVERSION}-armv7.sdk&quot; &gt;&gt; &quot;${LOG}&quot; 2&gt;&amp;1

sed -ie &quot;s!^CFLAG=!CFLAG=-isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS${SDKVERSION}.sdk !&quot; &quot;Makefile&quot;
# remove sig_atomic for iPhoneOS
sed -ie &quot;s!static volatile sig_atomic_t intr_signal;!static volatile intr_signal;!&quot; &quot;crypto/ui/ui_openssl.c&quot;

make &gt;&gt; &quot;${LOG}&quot; 2&gt;&amp;1
make install &gt;&gt; &quot;${LOG}&quot; 2&gt;&amp;1
make clean &gt;&gt; &quot;${LOG}&quot; 2&gt;&amp;1
#############

echo &quot;Build library...&quot;
lipo -create ${CURRENTPATH}/bin/iPhoneSimulator${SDKVERSION}.sdk/lib/libssl.a ${CURRENTPATH}/bin/iPhoneOS${SDKVERSION}-armv6.sdk/lib/libssl.a ${CURRENTPATH}/bin/iPhoneOS${SDKVERSION}-armv7.sdk/lib/libssl.a -output ${CURRENTPATH}/libssl.a

lipo -create ${CURRENTPATH}/bin/iPhoneSimulator${SDKVERSION}.sdk/lib/libcrypto.a ${CURRENTPATH}/bin/iPhoneOS${SDKVERSION}-armv6.sdk/lib/libcrypto.a ${CURRENTPATH}/bin/iPhoneOS${SDKVERSION}-armv7.sdk/lib/libcrypto.a -output ${CURRENTPATH}/libcrypto.a

mkdir -p ${CURRENTPATH}/include
cp -R ${CURRENTPATH}/bin/iPhoneSimulator${SDKVERSION}.sdk/include/openssl ${CURRENTPATH}/include/
echo &quot;Building done.&quot;
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S/MIME on iOS with OpenSSL (iPhone/iPad) (UPDATE #6)]]></title>
    <link href="http://x2on.github.com/2010/12/06/smime-on-ios-with-openssl-iphoneipad/"/>
    <updated>2010-12-06T09:52:25+01:00</updated>
    <id>http://x2on.github.com/2010/12/06/smime-on-ios-with-openssl-iphoneipad</id>
    <content type="html"><![CDATA[<p>Whenever I receive an encrypted e-mail, I can't read it on my iPhone. So i write a little app that can do it ;)</p>

<!--more-->


<p>I used my OpenSSL-for-iOS Library (<a href="http://www.x2on.de/2010/07/13/tutorial-iphone-app-with-compiled-openssl-1-0-0a-library/">http://www.x2on.de/2010/07/13/tutorial-iphone-app-with-compiled-openssl-1-0-0a-library/</a>) and registered the P7M-Files from S/MIME for my app. So i can open the encrypted files directly from the iOS mail app and decrypt it with my key.</p>

<p><strong>UPDATE #1 (09.12.2010):</strong> New screenshots from current development build</p>

<p><strong>UPDATE #2 (01.02.2011):</strong> The app is finished - But the encryption export is not really easy - stay tuned...</p>

<p><strong>UPDATE #3 (16.02.2011):</strong> So finally i got my ERN-Number with SNAP-R from BIS. Registered the app in iTunes Connect and working on some bugfixes and improvements. Stay tuned...</p>

<p><strong>UPDATE #4 (01.04.2011):</strong> Looking for Beta-tester: <a href="http://www.x2on.de/2011/04/01/secure-mail-beta-test-smime-on-ios-with-openssl/">http://www.x2on.de/2011/04/01/secure-mail-beta-test-smime-on-ios-with-openssl/</a></p>

<p><strong>UPDATE #5 (24.04.2011):</strong> Waiting for review: <a href="http://www.x2on.de/2011/04/24/secure-mail-waiting-for-review/">http://www.x2on.de/2011/04/24/secure-mail-waiting-for-review/</a></p>

<p><strong>UPDATE #6 (28.04.2011):</strong> The App is now ready for download: <a href="http://www.x2on.de/2011/04/28/secure-mail-is-ready-for-download-on-apple-app-store/">http://www.x2on.de/2011/04/28/secure-mail-is-ready-for-download-on-apple-app-store/</a></p>

<p>So next steps are:</p>

<ul>
<li>GUI (Done)</li>
<li>Key-Management (Done)</li>
<li>Encryption (Done)</li>
<li>Decryption (Done)</li>
<li>Check Signature (Not sure if possible at moment)</li>
<li>Sign messages (In the future)</li>
</ul>


<p><a href="http://www.x2on.de/wp-content/uploads/2010/12/Screen2.png"><img src="http://www.x2on.de/wp-content/uploads/2010/12/Screen2-159x300.png" alt="" /></a><a href="http://www.x2on.de/wp-content/uploads/2010/12/Screen1.png"><img src="http://www.x2on.de/wp-content/uploads/2010/12/Screen1-159x300.png" alt="" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kostenlose Zertifikate - StartSSL und CAcert]]></title>
    <link href="http://x2on.github.com/2009/11/20/kostenlose-zertifikate-startssl-und-cacert/"/>
    <updated>2009-11-20T14:25:41+01:00</updated>
    <id>http://x2on.github.com/2009/11/20/kostenlose-zertifikate-startssl-und-cacert</id>
    <content type="html"><![CDATA[<p>StartCom bietet mit StartSSL kostenlose digitale Zertifikate an (S/MIME, X.509, SSL/TLS). Class1 Zertifikate können jederzeit mit einer kostenlosen Anmeldung bei StartSSL erstellt werden. Um den eigenen Namen in das Zertifikat zu bekommen, muss eine Identitätsprüfung vorgenommen werden. Dabei kommt die Technik des Web of Trust zum Einsatz. Jeder Anwender muss hierbei seine Identität von mindestens zwei Notaren (mit zwei gültigen Personaldokumenten) überprüfen lassen. Die Root-Zertifikate (CA) von StartSSL sind im Gegensatz zu anderen kostenlosen Anbieteren bereits in allen gängigen Anwendungen (Internet Explorer, Firefox, Safari, Thunderbird, Outlook, etc.) enthalten. Dadurch enstehen keine Warnungen beim Nutzen der Zertifikate.</p>

<p>Ich bin selbst ein WoT-Notar bei StartSSL. Gerne führe ich im Raum Berlin Identitätsprüfungen durch.
Ich bin auch CAcert Assurer und kann gleichzeitig die nötigen Prüfungen für CAcert durchführen.</p>

<p><strong>Weiterführende Links:</strong></p>

<ul>
<li><p><a href="https://www.startssl.com">https://www.startssl.com</a></p></li>
<li><p><a href="http://www.cacert.org">http://www.cacert.org</a></p></li>
<li><p><a href="http://www.bluehelp.de/kostenlose_zertifikate/">http://www.bluehelp.de/kostenlose_zertifikate/</a> (Weiterer Notar im Raum Berlin)</p></li>
</ul>


<p><img src="http://localhost/wordpress/wp-content/uploads/2009/11/startssl-notar.png" alt="startssl-notar" /><img src="http://localhost/wordpress/wp-content/uploads/2009/11/cacert-assurer.png" alt="cacert-assurer" /></p>
]]></content>
  </entry>
  
</feed>
